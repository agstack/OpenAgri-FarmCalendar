# Generated by Django 5.0.4 on 2025-01-31 11:46

import django.db.models.deletion
import farm_management.models.validators
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('farm_management', '0002_remove_farmanimal_age_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CompostPile',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('volume', models.FloatField(help_text='Volume in cubic meters')),
                ('composting_stage', models.CharField(choices=[('preparation', 'Preparation'), ('active', 'Active Composting'), ('curing', 'Curing'), ('ready', 'Ready'), ('used', 'Used')], default='preparation', max_length=50, verbose_name='Composting Stage')),
                ('last_turned_date', models.DateField(blank=True, help_text='Date the compost pile was last turned or aerated.', null=True, verbose_name='Last Turned Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date the composting process was completed.', null=True, verbose_name='Completion Date')),
                ('temperature', models.FloatField(blank=True, help_text='Latest temperature reading in Celsius.', null=True, verbose_name='Temperature')),
                ('moisture', models.FloatField(blank=True, help_text='Latest moisture level reading in percentage.', null=True, verbose_name='Moisture')),
                ('ph', models.FloatField(blank=True, help_text='Latest pH reading.', null=True, verbose_name='pH')),
                ('npk', models.CharField(blank=True, help_text="Enter NPK values as comma-separated floats (e.g., '10.5,15.2,25.0').", max_length=50, null=True, validators=[farm_management.models.validators.validate_comma_separated_float_list], verbose_name='NPK')),
                ('parcel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)ss', to='farm_management.farmparcel')),
            ],
            options={
                'verbose_name': 'Compost Pile',
                'verbose_name_plural': 'Compost Piles',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCompostPile',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('volume', models.FloatField(help_text='Volume in cubic meters')),
                ('composting_stage', models.CharField(choices=[('preparation', 'Preparation'), ('active', 'Active Composting'), ('curing', 'Curing'), ('ready', 'Ready'), ('used', 'Used')], default='preparation', max_length=50, verbose_name='Composting Stage')),
                ('last_turned_date', models.DateField(blank=True, help_text='Date the compost pile was last turned or aerated.', null=True, verbose_name='Last Turned Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date the composting process was completed.', null=True, verbose_name='Completion Date')),
                ('temperature', models.FloatField(blank=True, help_text='Latest temperature reading in Celsius.', null=True, verbose_name='Temperature')),
                ('moisture', models.FloatField(blank=True, help_text='Latest moisture level reading in percentage.', null=True, verbose_name='Moisture')),
                ('ph', models.FloatField(blank=True, help_text='Latest pH reading.', null=True, verbose_name='pH')),
                ('npk', models.CharField(blank=True, help_text="Enter NPK values as comma-separated floats (e.g., '10.5,15.2,25.0').", max_length=50, null=True, validators=[farm_management.models.validators.validate_comma_separated_float_list], verbose_name='NPK')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parcel', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='farm_management.farmparcel')),
            ],
            options={
                'verbose_name': 'historical Compost Pile',
                'verbose_name_plural': 'historical Compost Piles',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
